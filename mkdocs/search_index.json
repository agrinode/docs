{
    "docs": [
        {
            "location": "/", 
            "text": "function googleTranslateElementInit() {\n            new google.translate.TranslateElement({pageLanguage: 'en'}, 'google_translate_element');\n            }\n            \n\n\n\n\n\n\nWelcome to Agrinode Project\n\n\nHomepage: \nhttps://agrinode.github.io\n\n\nBlog: \nhttps://agrinode.blogspot.com\n\n\nBuilding Wireless Sensor Network for Agriculture Applications\n\n\nWe - the AgriNode team are proud to receive the Special Acknowledgement from the judging panel.\n\n\nhttps://www.eclipse.org/org/press-release/openiotchallenge3_winners.php\n\n\nThanks to the EclipseIoT and the sponsors for organizing the Open IoT Challenge where we have learned about Open-source IoT platforms and made new friends in the IoT world.\n\n\nWe are participant in \nOpenIoTChallenge 3.0\n\n\n\n\nAny comments, suggestions are welcome.\n\n\nFeel free to share your ideas in our blog: \nAgrinode Blogspot", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-agrinode-project", 
            "text": "Homepage:  https://agrinode.github.io  Blog:  https://agrinode.blogspot.com", 
            "title": "Welcome to Agrinode Project"
        }, 
        {
            "location": "/#building-wireless-sensor-network-for-agriculture-applications", 
            "text": "", 
            "title": "Building Wireless Sensor Network for Agriculture Applications"
        }, 
        {
            "location": "/#we-the-agrinode-team-are-proud-to-receive-the-special-acknowledgement-from-the-judging-panel", 
            "text": "https://www.eclipse.org/org/press-release/openiotchallenge3_winners.php", 
            "title": "We - the AgriNode team are proud to receive the Special Acknowledgement from the judging panel."
        }, 
        {
            "location": "/#thanks-to-the-eclipseiot-and-the-sponsors-for-organizing-the-open-iot-challenge-where-we-have-learned-about-open-source-iot-platforms-and-made-new-friends-in-the-iot-world", 
            "text": "", 
            "title": "Thanks to the EclipseIoT and the sponsors for organizing the Open IoT Challenge where we have learned about Open-source IoT platforms and made new friends in the IoT world."
        }, 
        {
            "location": "/#we-are-participant-in-openiotchallenge-30", 
            "text": "Any comments, suggestions are welcome.  Feel free to share your ideas in our blog:  Agrinode Blogspot", 
            "title": "We are participant in OpenIoTChallenge 3.0"
        }, 
        {
            "location": "/system_architech/", 
            "text": "System Architecture for AgriNode project.", 
            "title": "System Architecture"
        }, 
        {
            "location": "/system_architech/#system-architecture-for-agrinode-project", 
            "text": "", 
            "title": "System Architecture for AgriNode project."
        }, 
        {
            "location": "/orangepi/", 
            "text": "Orange Pi Zero\n\n\nOrange Pi Zero is a cheap single-board computer. It can run Android 4.4, Ubuntu, Debian.  It uses the AllWinner H2 SoC, and has 256MB/512MB DDR3 SDRAM(256MB version is Standard version\n\n\n\n\nOrder here: \nhttp://www.orangepi.org/orangepizero/\n\n\nInstall Debian on Orange Pi\n\n\nPlease follow the link: \nhttps://docs.armbian.com/User-Guide_Getting-Started/\n\n\nInstall default java JRE/JDK on Debian (JDK 7)\n\n\n\n\nWeb Browser Plugin\n\n\n\n\nTo install the default Web Browser Plugin on your system, run: \n\n\napt-get install icedtea-plugin\n\n\n\n\n\n\nJRE\nTo install the default JRE (Java Runtime Environment) on your system, run: \n\n\n\n\napt-get install default-jre\n\n\n\n\n\n\nJDK\n\n\n\n\nTo install the default JDK (Java Development Kit) on your system, run: \n\n\napt-get install default-jdk\n\n\n\n\nSource: \nhttps://wiki.debian.org/Java\n\n\nOr you can install Oracle JDK 8\n\n\necho \ndeb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\n | sudo tee /etc/apt/sources.list.d/webupd8team-java.list\necho \ndeb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main\n | sudo tee -a /etc/apt/sources.list.d/webupd8team-java.list\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\nsudo apt-get install oracle-java8-set-default\n\n\n\n\nInstall Eclipse Kura\n\n\nOrangePi runs Debian 8. It is compatible with \nKura pakage for BeagleBone\n\n\n\n\nInstall the gdebi command line tool:\n\n\n\n\nsudo apt-get update\nsudo apt-get install gdebi-core\n\n\n\n\n\n\nDownload the Kura package:\n\n\n\n\nwget http://download.eclipse.org/kura/releases/\nversion\n/kura_\nversion\n_beaglebone_debian_installer.deb\n\n\n\n\nNote: replace \n in the URL above with the version number of the latest release (e.g. 2.1.0).\n\n\n\n\nInstall Kura:\n\n\n\n\nsudo gdebi kura_\nversion\n_beaglebone_debian_installer.deb\n\n\n\n\n\n\nReboot the Orange Pi\n\n\n\n\nsudo reboot\n\n\n\n\n\n\nKura setups a local web ui that is available using a browser via:\n\n\n\n\nhttp://\ndevice-ip\n\n\n\n\n\nFor more detail, please visit: \nhttp://eclipse.github.io/kura/doc/beaglebone-quick-start.html\n\n\nVideo:", 
            "title": "Install Kura on Orange Pi"
        }, 
        {
            "location": "/orangepi/#orange-pi-zero", 
            "text": "Orange Pi Zero is a cheap single-board computer. It can run Android 4.4, Ubuntu, Debian.  It uses the AllWinner H2 SoC, and has 256MB/512MB DDR3 SDRAM(256MB version is Standard version   Order here:  http://www.orangepi.org/orangepizero/", 
            "title": "Orange Pi Zero"
        }, 
        {
            "location": "/orangepi/#install-debian-on-orange-pi", 
            "text": "Please follow the link:  https://docs.armbian.com/User-Guide_Getting-Started/", 
            "title": "Install Debian on Orange Pi"
        }, 
        {
            "location": "/orangepi/#install-default-java-jrejdk-on-debian-jdk-7", 
            "text": "Web Browser Plugin   To install the default Web Browser Plugin on your system, run:   apt-get install icedtea-plugin   JRE\nTo install the default JRE (Java Runtime Environment) on your system, run:    apt-get install default-jre   JDK   To install the default JDK (Java Development Kit) on your system, run:   apt-get install default-jdk  Source:  https://wiki.debian.org/Java", 
            "title": "Install default java JRE/JDK on Debian (JDK 7)"
        }, 
        {
            "location": "/orangepi/#or-you-can-install-oracle-jdk-8", 
            "text": "echo  deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main  | sudo tee /etc/apt/sources.list.d/webupd8team-java.list\necho  deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main  | sudo tee -a /etc/apt/sources.list.d/webupd8team-java.list\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\nsudo apt-get install oracle-java8-set-default", 
            "title": "Or you can install Oracle JDK 8"
        }, 
        {
            "location": "/orangepi/#install-eclipse-kura", 
            "text": "OrangePi runs Debian 8. It is compatible with  Kura pakage for BeagleBone   Install the gdebi command line tool:   sudo apt-get update\nsudo apt-get install gdebi-core   Download the Kura package:   wget http://download.eclipse.org/kura/releases/ version /kura_ version _beaglebone_debian_installer.deb  Note: replace   in the URL above with the version number of the latest release (e.g. 2.1.0).   Install Kura:   sudo gdebi kura_ version _beaglebone_debian_installer.deb   Reboot the Orange Pi   sudo reboot   Kura setups a local web ui that is available using a browser via:   http:// device-ip   For more detail, please visit:  http://eclipse.github.io/kura/doc/beaglebone-quick-start.html  Video:", 
            "title": "Install Eclipse Kura"
        }, 
        {
            "location": "/install_nodered_orangepi/", 
            "text": "Install Node-red on Orange Pi\n\n\nStep 1: Install NodeJs v7.x\n\n\ncurl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n\n\n\n\nStep 2: Install Node-RED\n\n\nsudo npm install -g --unsafe-perm node-red\n\n\nStep 3: Start Node-RED\n\n\nroot@orangepizero:~# node-red\n22 Mar 17:51:35 - [info]\n\nWelcome to Node-RED\n===================\n\n22 Mar 17:51:35 - [info] Node-RED version: v0.16.2\n22 Mar 17:51:35 - [info] Node.js  version: v7.7.3\n22 Mar 17:51:35 - [info] Linux 3.4.113-sun8i arm LE\n22 Mar 17:51:37 - [info] Loading palette nodes\n22 Mar 17:51:43 - [warn] ------------------------------------------------------\n22 Mar 17:51:43 - [warn] [rpi-gpio] Info : Ignoring Raspberry Pi specific node\n22 Mar 17:51:43 - [warn] ------------------------------------------------------\n22 Mar 17:51:43 - [info] Settings file  : /root/.node-red/settings.js\n22 Mar 17:51:43 - [info] User directory : /root/.node-red\n22 Mar 17:51:43 - [info] Flows file     : /root/.node-red/flows_orangepizero.json\n22 Mar 17:51:43 - [info] Creating new flow file\n22 Mar 17:51:43 - [info] Starting flows\n22 Mar 17:51:43 - [info] Started flows\n22 Mar 17:51:43 - [info] Server now running at http://127.0.0.1:1880/\n\n\n\n\n\nStep 4: Adding nodes\n\n\ncd $HOME/.node-red\nnpm install \nnpm-package-name\n\n\n\n\n\n\nreplace \n with specific nodes package name that you can find in \nnodes library\n. For example, the folowing commands will install package:  Orange Pi GPIO\n\n\nsudo npm install node-red-contrib-opi-gpio\n\n\nRestart Node-RED. Then open web-brownser. Navigate to http://orange_pi_ip:1880/\n\n\nYou can see the result as the picture below\n\n\n\n\nStep 5 (optional): Start Node-RED on boot\n\n\nInstall nodered.service file and start and stop scripts.\n\n\nsudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/nodered.service -O /lib/systemd/system/nodered.service\nsudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-start -O /usr/bin/node-red-start\nsudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-stop -O /usr/bin/node-red-stop\nsudo chmod +x /usr/bin/node-red-st*\nsudo systemctl daemon-reload\n\n\n\n\n\nsudo nano /lib/systemd/system/nodered.service\n\n\nEdit the \nnodered.service\n file as follow:\n\n\n# systemd service file to start Node-RED\n[Unit]\nDescription=Node-RED graphical event wiring tool.\nWants=network.target\nDocumentation=http://nodered.org/docs/hardware/raspberrypi.html\n[Service]\nType=simple\n# Run as root user in order to have access to gpio pins\nUser=root\nGroup=root\nNice=5\nEnvironment=\nNODE_OPTIONS=--max-old-space-size=128\n\n#Environment=\nNODE_RED_OPTIONS=-v\n\nExecStart=/usr/bin/env node-red-pi $NODE_OPTIONS $NODE_RED_OPTIONS\nKillSignal=SIGINT\nRestart=on-failure\nSyslogIdentifier=Node-RED\n[Install]\nWantedBy=multi-user.target\n\n\n\n\n\nTo then enable Node-RED to run automatically at every boot\n\n\nsudo systemctl daemon-reload\nsudo systemctl enable nodered.service\n\n\n\n\n\nIt can be disabled by\n\n\nsudo systemctl disable nodered.service", 
            "title": "Install Node-RED on Orange Pi"
        }, 
        {
            "location": "/install_nodered_orangepi/#install-node-red-on-orange-pi", 
            "text": "", 
            "title": "Install Node-red on Orange Pi"
        }, 
        {
            "location": "/install_nodered_orangepi/#step-1-install-nodejs-v7x", 
            "text": "curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -\nsudo apt-get install -y nodejs", 
            "title": "Step 1: Install NodeJs v7.x"
        }, 
        {
            "location": "/install_nodered_orangepi/#step-2-install-node-red", 
            "text": "sudo npm install -g --unsafe-perm node-red", 
            "title": "Step 2: Install Node-RED"
        }, 
        {
            "location": "/install_nodered_orangepi/#step-3-start-node-red", 
            "text": "root@orangepizero:~# node-red\n22 Mar 17:51:35 - [info]\n\nWelcome to Node-RED\n===================\n\n22 Mar 17:51:35 - [info] Node-RED version: v0.16.2\n22 Mar 17:51:35 - [info] Node.js  version: v7.7.3\n22 Mar 17:51:35 - [info] Linux 3.4.113-sun8i arm LE\n22 Mar 17:51:37 - [info] Loading palette nodes\n22 Mar 17:51:43 - [warn] ------------------------------------------------------\n22 Mar 17:51:43 - [warn] [rpi-gpio] Info : Ignoring Raspberry Pi specific node\n22 Mar 17:51:43 - [warn] ------------------------------------------------------\n22 Mar 17:51:43 - [info] Settings file  : /root/.node-red/settings.js\n22 Mar 17:51:43 - [info] User directory : /root/.node-red\n22 Mar 17:51:43 - [info] Flows file     : /root/.node-red/flows_orangepizero.json\n22 Mar 17:51:43 - [info] Creating new flow file\n22 Mar 17:51:43 - [info] Starting flows\n22 Mar 17:51:43 - [info] Started flows\n22 Mar 17:51:43 - [info] Server now running at http://127.0.0.1:1880/", 
            "title": "Step 3: Start Node-RED"
        }, 
        {
            "location": "/install_nodered_orangepi/#step-4-adding-nodes", 
            "text": "cd $HOME/.node-red\nnpm install  npm-package-name   replace   with specific nodes package name that you can find in  nodes library . For example, the folowing commands will install package:  Orange Pi GPIO  sudo npm install node-red-contrib-opi-gpio  Restart Node-RED. Then open web-brownser. Navigate to http://orange_pi_ip:1880/  You can see the result as the picture below", 
            "title": "Step 4: Adding nodes"
        }, 
        {
            "location": "/install_nodered_orangepi/#step-5-optional-start-node-red-on-boot", 
            "text": "Install nodered.service file and start and stop scripts.  sudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/nodered.service -O /lib/systemd/system/nodered.service\nsudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-start -O /usr/bin/node-red-start\nsudo wget https://raw.githubusercontent.com/node-red/raspbian-deb-package/master/resources/node-red-stop -O /usr/bin/node-red-stop\nsudo chmod +x /usr/bin/node-red-st*\nsudo systemctl daemon-reload  sudo nano /lib/systemd/system/nodered.service  Edit the  nodered.service  file as follow:  # systemd service file to start Node-RED\n[Unit]\nDescription=Node-RED graphical event wiring tool.\nWants=network.target\nDocumentation=http://nodered.org/docs/hardware/raspberrypi.html\n[Service]\nType=simple\n# Run as root user in order to have access to gpio pins\nUser=root\nGroup=root\nNice=5\nEnvironment= NODE_OPTIONS=--max-old-space-size=128 \n#Environment= NODE_RED_OPTIONS=-v \nExecStart=/usr/bin/env node-red-pi $NODE_OPTIONS $NODE_RED_OPTIONS\nKillSignal=SIGINT\nRestart=on-failure\nSyslogIdentifier=Node-RED\n[Install]\nWantedBy=multi-user.target  To then enable Node-RED to run automatically at every boot  sudo systemctl daemon-reload\nsudo systemctl enable nodered.service  It can be disabled by  sudo systemctl disable nodered.service", 
            "title": "Step 5 (optional): Start Node-RED on boot"
        }, 
        {
            "location": "/nodered_tutorial/", 
            "text": "Node-red tutorial\n\n\nWe built a Node-red based application in IBM Bluemix platform for data stored and visualized. Environmental information can be monitored everywhere if there is the internet available by surfing to the specific web address \nhttp://agrinode.mybluemix.net/ui\n to monitor the data. \n\n\nDeploy a Node-red application on IBM Blumix\n\n\nPlease follow this link: \nhttps://nodered.org/docs/platforms/bluemix\n\n\nDeploy the node-red flow app for receiving data from the gateway\n\n\nThe figure demonstrates how to receive and process data from each sensor node.\n\n\n\n\nNode  1 is the MQTT node which subscribes the gateway topic to receive the gateway data.\nNode 2 is a mongodb node which is responsible for storing sensor data in mongodb (mLab).\nNode 3 is a dashboard node which is used to visualize sensor data as the graphs\nMoreover, we built the warning system to warn user if the temperature goes high for example.", 
            "title": "Node Red tutorial"
        }, 
        {
            "location": "/nodered_tutorial/#node-red-tutorial", 
            "text": "We built a Node-red based application in IBM Bluemix platform for data stored and visualized. Environmental information can be monitored everywhere if there is the internet available by surfing to the specific web address  http://agrinode.mybluemix.net/ui  to monitor the data.", 
            "title": "Node-red tutorial"
        }, 
        {
            "location": "/nodered_tutorial/#deploy-a-node-red-application-on-ibm-blumix", 
            "text": "Please follow this link:  https://nodered.org/docs/platforms/bluemix", 
            "title": "Deploy a Node-red application on IBM Blumix"
        }, 
        {
            "location": "/nodered_tutorial/#deploy-the-node-red-flow-app-for-receiving-data-from-the-gateway", 
            "text": "The figure demonstrates how to receive and process data from each sensor node.   Node  1 is the MQTT node which subscribes the gateway topic to receive the gateway data.\nNode 2 is a mongodb node which is responsible for storing sensor data in mongodb (mLab).\nNode 3 is a dashboard node which is used to visualize sensor data as the graphs\nMoreover, we built the warning system to warn user if the temperature goes high for example.", 
            "title": "Deploy the node-red flow app for receiving data from the gateway"
        }, 
        {
            "location": "/mqtt_demo/", 
            "text": "Mosquitto\n(MQTT broker) Demo\n\n\nMQTT stands for Message Queuing Telemetry Transport which is an ISO standard (ISO/IEC PRF 20922) publish-subscribe-based \"lightweight\" messaging protocol for use on top of the TCP/IP protocol. It is designed for connections to remote locations where a \"small code footprint\" is required or the network bandwidth is limited. The publish-subscribe messaging pattern requires a message broker. The broker is responsible for distributing messages to interested clients based on the topic of a message. Andy Stanford-Clark and Arlen Nipper of Cirrus Link Solutions authored the first version of the protocol in 1999 \n[1]\n. \n\n\nIn this demo, I work on Mosquitto platform (An Open source MQTT v3.1/v3.1.1 Broker)\n\n\nThe picture shows the basic MQTT protocol. MQTT broker - Mosquitto is installed into a Gateway - \nKura based\n (Hardware: Raspberry Pi 2; OS: Raspbian). The clients - Publisher/Subscriber connect to MQTT broker via WiFi which is established by the PC. The Subscriber is an Arduino board with WiFi module that subscribes a Topic (for example \"Node01\") to receive a message. The Publisher is a smartphone running MQTT client software that will publish a message to a topic (for example \"Node01\").\n\n\n\n\nRequirements\n\n\n\n\nHardwares: Raspberry Pi 2 (WiFi dongle); Arduino with WiFi module (Adafruit Huzzah Esp8266); Smartphone (Android, IOS)\n\n\n\n\n* Step 1: Setup Kura into Raspberry Pi\n\n\nThe picture shows the Gateway hardware which consists of Raspberry Pi and WiFi dongle.\n\n\n\n\nFollow this link for installing Kura into Raspberry Pi: \nhttp://eclipse.github.io/kura/doc/raspberry-pi-quick-start.html\n\n\nWe setup the Raspbery Pi in the Access Point mode for providing WiFi connection:\n\n\n\n\n* Step 2: Install Mosquitto broker on Raspberry Pi\n\n\nWe use Mosquitto platform as a MQTT broker running on Rapsberry Pi. It provides MQTT protocol for our sensor network system. For more information about MQTT protocol; please visit this page: \nwhat is MQTT and how does it work\n\n\nTo install Mosquitto, follow these steps:\n\n\nwget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\n\n\nsudo apt-key add mosquitto-repo.gpg.key\n\n\nThen make the repository available to apt:\n\n\ncd /etc/apt/sources.list.d/\n\n\nThen one of the following, depending on which version of debian you are using:\n\n\nsudo wget http://repo.mosquitto.org/debian/mosquitto-jessie.list\n\n\nThen update apt information:\n\n\nsudo apt-get update\n\n\nAnd discover what mosquitto packages are available:\n\n\napt-cache search mosquitto\n\n\nOr just install mosquitto broker and clients tool:\n\n\nsudo apt-get install mosquitto mosquitto-clients python-mosquitto\n\n\nStop the Server\n\n\nsudo /etc/init.d/mosquitto stop\n\n\nConfiguring and Starting the Mosquitto Server\n\n\nsudo nano /etc/mosquitto/mosquitto.conf\n\n\nThe File Should Look as follows\n\n\n# Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\n\npid_file /var/run/mosquitto.pid\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest topic\n\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\n\nconnection_messages true\nlog_timestamp true\n\ninclude_dir /etc/mosquitto/conf.d\n\n\n\n\nStarting the Server\n\n\nsudo /etc/init.d/mosquitto start\n\n\nFor more information, please follow this link: \nhttp://mosquitto.org/2013/01/mosquitto-debian-repository/\n\n\n* Test mosquitto broker\n\n\nOpen up two more terminal windows.\n\n\nIn Terminal window (subscriber) 1 type:\n\n\nmosquitto_sub -d -t hello/world\n\n\nIn Terminal window 2 (publisher) type:\n\n\nmosquitto_pub -d -t hello/world -m \"Hello from Terminal window 2!\"\n\n\nResult:\n\n\n* Step 3: Install MQTT demo code for Arduino\n\n\nThe Huzzah esp8266 board will receive the message from the phone in order to control a LED (connected to pin #0). The LED will be turned off if Huzzah receives message \"a\" and turn on with others messages.\n\n\n\n\nThere are many MQTT libraries for Arduino platform. For this demo, I use MQTT library created by Joel Gahwiler \n(available in Github)\n\n\nIt is installed into Ardafruit Huzzah Esp8266 board.\n\n\nIn the sketch, we need to define these parameters:\n\n\n\"firstly, we need to connect Arduino Huzzah to the Gateway via WiFi connection which is established by the Gateway\"\n\n\nssid = \"YOUR_WIFI_NAME\"\n   //WiFi connection established from the Gateway\n\n\npass = \"YOUR_WIFI_PASSWORD\"\n \n\n\nThen replace \n\"broker.shiftr.io\"\n by \n172.16.1.1\n for MQTT broker\n\n\nFinally, define subscribe topic \nclient.subscribe(\"node01\");\n for receiving message payload from the publisher.\n\n\nFull code here:\n\n\n#include \nESP8266WiFi.h\n\n\n#include \nMQTTClient.h\n\n\nconst char *ssid = \nagrinode\n;\n\nconst char *pass = \n12345678\n;\n\nWiFiClient net;\n\nMQTTClient client;\n\nunsigned long lastMillis = 0;\n\nvoid connect(); // \n- predefine connect() for setup()\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n  WiFi.begin(ssid, pass);\n\n  client.begin(\n172.16.1.1\n, net);\n\n  pinMode(0,OUTPUT);\n\n  connect();\n\n}\n\nvoid connect() {\n\n ` Serial.print(\nchecking wifi...\n);\n\n` while (WiFi.status() != WL_CONNECTED) {`\n\n `   Serial.print(\n.\n);`\n\n  `  delay(1000);`\n\n ` }`\n\n ` Serial.print(\n\\nconnecting...\n);`\n\n  `while (!client.connect(\narduino\n, \ntry\n, \ntry\n)) {`\n\n  `  Serial.print(\n.\n);`\n\n   ` delay(1000);`\n\n ` }`\n\n  `Serial.println(\n\\nconnected!\n);`\n\n ` client.subscribe(\nnode01\n);`\n\n  `// client.unsubscribe(\n/example\n);`\n\n}\n\nvoid loop() {\n\n  client.loop();\n\n  delay(10); // \n- fixes some issues with WiFi stability\n\n  if(!client.connected()) {\n\n    connect();\n\n  }\n\n  // publish a message roughly every second.\n\n  if(millis() - lastMillis \n 1000) {\n\n   lastMillis = millis();\n\n    client.publish(\n/hello\n, \nworld\n);\n\n  }\n\n}\n\nvoid messageReceived(String topic, String payload, char * bytes, unsigned int length) {\n\n  Serial.print(\nincoming: \n);\n\n  Serial.print(topic);\n\n  Serial.print(\n - \n);\n\n  Serial.print(payload);\n\n  Serial.println();\n\n  if (payload==\na\n){digitalWrite(0,HIGH);}\n\n  else digitalWrite(0,LOW);\n\n}\n\n\n\n\n* Step 4: Install MQTT client software for Android phone\n\n\nThere are many softwares available for MQTT protocol testing. I use \nMyMQTT\n for my Android phone.\n\n\n\n\nFor \"Setting\": we need MQTT broker host (it is the Gateway IP: \n172.16.1.1:1883\n) and \"Topic\" for publishing message (it is: \nNode01\n).\n\n\nFor publishing a message: navigate to \"Publish\" button -\n then fill in the Topic (\nNode01\n) and message.\n\n\n* Demo Video\n\n\n\n\n\nRefferences\n\n\n[1] \nhttps://en.wikipedia.org/wiki/MQTT", 
            "title": "MQTT demo"
        }, 
        {
            "location": "/mqtt_demo/#mosquittomqtt-broker-demo", 
            "text": "MQTT stands for Message Queuing Telemetry Transport which is an ISO standard (ISO/IEC PRF 20922) publish-subscribe-based \"lightweight\" messaging protocol for use on top of the TCP/IP protocol. It is designed for connections to remote locations where a \"small code footprint\" is required or the network bandwidth is limited. The publish-subscribe messaging pattern requires a message broker. The broker is responsible for distributing messages to interested clients based on the topic of a message. Andy Stanford-Clark and Arlen Nipper of Cirrus Link Solutions authored the first version of the protocol in 1999  [1] .", 
            "title": "Mosquitto&nbsp;"
        }, 
        {
            "location": "/mqtt_demo/#in-this-demo-i-work-on-mosquitto-platform-an-open-source-mqtt-v31v311-broker", 
            "text": "The picture shows the basic MQTT protocol. MQTT broker - Mosquitto is installed into a Gateway -  Kura based  (Hardware: Raspberry Pi 2; OS: Raspbian). The clients - Publisher/Subscriber connect to MQTT broker via WiFi which is established by the PC. The Subscriber is an Arduino board with WiFi module that subscribes a Topic (for example \"Node01\") to receive a message. The Publisher is a smartphone running MQTT client software that will publish a message to a topic (for example \"Node01\").", 
            "title": "In this demo, I work on Mosquitto platform (An Open source MQTT v3.1/v3.1.1 Broker)"
        }, 
        {
            "location": "/mqtt_demo/#requirements", 
            "text": "Hardwares: Raspberry Pi 2 (WiFi dongle); Arduino with WiFi module (Adafruit Huzzah Esp8266); Smartphone (Android, IOS)", 
            "title": "Requirements"
        }, 
        {
            "location": "/mqtt_demo/#step-1-setup-kura-into-raspberry-pi", 
            "text": "The picture shows the Gateway hardware which consists of Raspberry Pi and WiFi dongle.   Follow this link for installing Kura into Raspberry Pi:  http://eclipse.github.io/kura/doc/raspberry-pi-quick-start.html  We setup the Raspbery Pi in the Access Point mode for providing WiFi connection:", 
            "title": "* Step 1: Setup Kura into Raspberry Pi"
        }, 
        {
            "location": "/mqtt_demo/#step-2-install-mosquitto-broker-on-raspberry-pi", 
            "text": "We use Mosquitto platform as a MQTT broker running on Rapsberry Pi. It provides MQTT protocol for our sensor network system. For more information about MQTT protocol; please visit this page:  what is MQTT and how does it work  To install Mosquitto, follow these steps:  wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key  sudo apt-key add mosquitto-repo.gpg.key  Then make the repository available to apt:  cd /etc/apt/sources.list.d/  Then one of the following, depending on which version of debian you are using:  sudo wget http://repo.mosquitto.org/debian/mosquitto-jessie.list  Then update apt information:  sudo apt-get update  And discover what mosquitto packages are available:  apt-cache search mosquitto  Or just install mosquitto broker and clients tool:  sudo apt-get install mosquitto mosquitto-clients python-mosquitto", 
            "title": "* Step 2: Install Mosquitto broker on Raspberry Pi"
        }, 
        {
            "location": "/mqtt_demo/#stop-the-server", 
            "text": "sudo /etc/init.d/mosquitto stop", 
            "title": "Stop the Server"
        }, 
        {
            "location": "/mqtt_demo/#configuring-and-starting-the-mosquitto-server", 
            "text": "sudo nano /etc/mosquitto/mosquitto.conf  The File Should Look as follows  # Place your local configuration in /etc/mosquitto/conf.d/\n#\n# A full description of the configuration file is at\n# /usr/share/doc/mosquitto/examples/mosquitto.conf.example\n\npid_file /var/run/mosquitto.pid\n\npersistence true\npersistence_location /var/lib/mosquitto/\n\nlog_dest topic\n\nlog_type error\nlog_type warning\nlog_type notice\nlog_type information\n\nconnection_messages true\nlog_timestamp true\n\ninclude_dir /etc/mosquitto/conf.d", 
            "title": "Configuring and Starting the Mosquitto Server"
        }, 
        {
            "location": "/mqtt_demo/#starting-the-server", 
            "text": "sudo /etc/init.d/mosquitto start  For more information, please follow this link:  http://mosquitto.org/2013/01/mosquitto-debian-repository/", 
            "title": "Starting the Server"
        }, 
        {
            "location": "/mqtt_demo/#test-mosquitto-broker", 
            "text": "Open up two more terminal windows.  In Terminal window (subscriber) 1 type:  mosquitto_sub -d -t hello/world  In Terminal window 2 (publisher) type:  mosquitto_pub -d -t hello/world -m \"Hello from Terminal window 2!\"", 
            "title": "* Test mosquitto broker"
        }, 
        {
            "location": "/mqtt_demo/#result", 
            "text": "", 
            "title": "Result:"
        }, 
        {
            "location": "/mqtt_demo/#step-3-install-mqtt-demo-code-for-arduino", 
            "text": "The Huzzah esp8266 board will receive the message from the phone in order to control a LED (connected to pin #0). The LED will be turned off if Huzzah receives message \"a\" and turn on with others messages.   There are many MQTT libraries for Arduino platform. For this demo, I use MQTT library created by Joel Gahwiler  (available in Github)  It is installed into Ardafruit Huzzah Esp8266 board.  In the sketch, we need to define these parameters:  \"firstly, we need to connect Arduino Huzzah to the Gateway via WiFi connection which is established by the Gateway\"  ssid = \"YOUR_WIFI_NAME\"    //WiFi connection established from the Gateway  pass = \"YOUR_WIFI_PASSWORD\"    Then replace  \"broker.shiftr.io\"  by  172.16.1.1  for MQTT broker  Finally, define subscribe topic  client.subscribe(\"node01\");  for receiving message payload from the publisher.", 
            "title": "* Step 3: Install MQTT demo code for Arduino"
        }, 
        {
            "location": "/mqtt_demo/#full-code-here", 
            "text": "#include  ESP8266WiFi.h \n\n#include  MQTTClient.h \n\nconst char *ssid =  agrinode ;\n\nconst char *pass =  12345678 ;\n\nWiFiClient net;\n\nMQTTClient client;\n\nunsigned long lastMillis = 0;\n\nvoid connect(); //  - predefine connect() for setup()\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n  WiFi.begin(ssid, pass);\n\n  client.begin( 172.16.1.1 , net);\n\n  pinMode(0,OUTPUT);\n\n  connect();\n\n}\n\nvoid connect() {\n\n ` Serial.print( checking wifi... );\n\n` while (WiFi.status() != WL_CONNECTED) {`\n\n `   Serial.print( . );`\n\n  `  delay(1000);`\n\n ` }`\n\n ` Serial.print( \\nconnecting... );`\n\n  `while (!client.connect( arduino ,  try ,  try )) {`\n\n  `  Serial.print( . );`\n\n   ` delay(1000);`\n\n ` }`\n\n  `Serial.println( \\nconnected! );`\n\n ` client.subscribe( node01 );`\n\n  `// client.unsubscribe( /example );`\n\n}\n\nvoid loop() {\n\n  client.loop();\n\n  delay(10); //  - fixes some issues with WiFi stability\n\n  if(!client.connected()) {\n\n    connect();\n\n  }\n\n  // publish a message roughly every second.\n\n  if(millis() - lastMillis   1000) {\n\n   lastMillis = millis();\n\n    client.publish( /hello ,  world );\n\n  }\n\n}\n\nvoid messageReceived(String topic, String payload, char * bytes, unsigned int length) {\n\n  Serial.print( incoming:  );\n\n  Serial.print(topic);\n\n  Serial.print(  -  );\n\n  Serial.print(payload);\n\n  Serial.println();\n\n  if (payload== a ){digitalWrite(0,HIGH);}\n\n  else digitalWrite(0,LOW);\n\n}", 
            "title": "Full code here:"
        }, 
        {
            "location": "/mqtt_demo/#step-4-install-mqtt-client-software-for-android-phone", 
            "text": "There are many softwares available for MQTT protocol testing. I use  MyMQTT  for my Android phone.   For \"Setting\": we need MQTT broker host (it is the Gateway IP:  172.16.1.1:1883 ) and \"Topic\" for publishing message (it is:  Node01 ).  For publishing a message: navigate to \"Publish\" button -  then fill in the Topic ( Node01 ) and message.", 
            "title": "* Step 4: Install MQTT client software for Android phone"
        }, 
        {
            "location": "/mqtt_demo/#demo-video", 
            "text": "", 
            "title": "* Demo Video"
        }, 
        {
            "location": "/mqtt_demo/#refferences", 
            "text": "[1]  https://en.wikipedia.org/wiki/MQTT", 
            "title": "Refferences"
        }, 
        {
            "location": "/Bitreactive_tutorial/", 
            "text": "Tutorial: Build a Configurable Eclipse Kura Application via Reactive Blocks\n\n\nSummary.\n\n\nThis tutorial demonstrates how to build an \nEclipse Kura\n application into a bundle by using \nReactive Blocks\n.\n\n\nAbout Reactive Blocks.\n\n\nBitreactive provides the visual development environment that allows java users build their own IoT applications by simply connecting building blocks. Each Reactive Block is designed for a specific purpose such as connecting to Cloud platform (IBM Watson IoT, Xively,...), providing MQTT protocol, LoRaWAN interface,...\nReactive Blocks is a Plugin for Eclipse, which provides a development environment for a developer build a complex application by drag and drop reactive blocks from the Reactive Blocks libraries.\nFor me, I have a very basic knowledge of Java but I can build a complex java application with Reactive Blocks. Each block has a description in the form of input and output pins and contract. In addition, Reactive Blocks provides the analyze and animation tools which are helpful for testing the applications.\n\n\nReferences:\n\n\nBlock by Block Towards IoT Applications\nIntegrating Reactive Block with JamaicaVM\n\n\nAbout \"AgriNode bundle\".\n\n\nIn this post, I share the workflow of \"AgriNode\" bundle that will be installed into Eclipse Kura based gateway. The gateway has MQTT server which sensor nodes connect to.\nThe bundle purpose is to send a command for getting data to sensor nodes via MQTT (with a gateway server: 172.16.1.1:1883). After receiving the command from the gateway, sensor nodes take sensors reading then send data back to the gateway. The gateway then forwards data to the cloud via MQTT protocol (with another broker: blocks2.bitreactive.com).\n\n\nRequierment.\n\n\nEclipse\nInstall Reactive Blocks for Kura\n\n\nBuild the Agrinode bundle with Reactive Blocks.\n\n\n\n\n\n\n\n\nBlock 1 - Periodic Toggler: To emit a signal (to publish a command message to sensor nodes) every configurable duration, The duration is configurable through Eclipse Kura configuration.\n\n\n\n\n\n\nBlock 2 - MQTT Publish: This block publishes messages on the local MQTT Broker (172.16.1.1:1883). \"init\" function:\n\n\n\n\n\n\npublic MQTTConfigParam init() {\nMQTTConfigParam p = new MQTTConfigParam(\n172.16.1.1\n);\nreturn p;\n}\n\n\n\n\n\n\nBlock 3 - MQTT subscriber: This block subscribes to messages from sensor nodes (node01, node02,...) on the local MQTT Broker (172.16.1.1:1883). \"init1\" function:\n\n\n\n\npublic MQTTConfigParam init1() {\nMQTTConfigParam p1 = new MQTTConfigParam(\n172.16.1.1\n);\np1.addSubscribeTopic(\nnode02_data\n);\np1.addSubscribeTopic(\nnode01_data\n);\nreturn p1;\n}\n\n\n\n\n\n\nBlock 4 - MQTT Publish: This block publishes messages on the cloud MQTT Broker (blocks2.bitreactive.com). \"init2\" function:\n\n\n\n\npublic MQTTConfigParam init2() {\nMQTTConfigParam p2 = new MQTTConfigParam(\nblocks2.bitreactive.com\n);\nreturn p2;\n}\n\n\n\n\nDeploy the bundle\n\n\nFirst, build the project for Kura --\n quick build to make a \n.dp file --\n install \n.dp file via Kura Web ui.\n\n\n\n\nTest result.\n\n\nThe data is now available at \nhttp://agrinode.mybluemix.net/ui/\n\n\nThe bundle works fine but there is an error that needs to be fixed (I am working on it).\n\n\nThe problem is that the bundle will not send any data to the cloud and can not reconnect to the cloud broker if the internet connection lost occurs. The Block 4 will disconnect and not reconnect to the broker if there is any error.  The only way to get the bundle works again is to reboot the gateway.\n\nThe picture below figures out this issue:", 
            "title": "Bitreactive tutorial"
        }, 
        {
            "location": "/Bitreactive_tutorial/#tutorial-build-a-configurable-eclipse-kura-application-via-reactive-blocks", 
            "text": "", 
            "title": "Tutorial: Build a Configurable Eclipse Kura Application via Reactive Blocks"
        }, 
        {
            "location": "/Bitreactive_tutorial/#summary", 
            "text": "This tutorial demonstrates how to build an  Eclipse Kura  application into a bundle by using  Reactive Blocks .", 
            "title": "Summary."
        }, 
        {
            "location": "/Bitreactive_tutorial/#about-reactive-blocks", 
            "text": "Bitreactive provides the visual development environment that allows java users build their own IoT applications by simply connecting building blocks. Each Reactive Block is designed for a specific purpose such as connecting to Cloud platform (IBM Watson IoT, Xively,...), providing MQTT protocol, LoRaWAN interface,...\nReactive Blocks is a Plugin for Eclipse, which provides a development environment for a developer build a complex application by drag and drop reactive blocks from the Reactive Blocks libraries.\nFor me, I have a very basic knowledge of Java but I can build a complex java application with Reactive Blocks. Each block has a description in the form of input and output pins and contract. In addition, Reactive Blocks provides the analyze and animation tools which are helpful for testing the applications.", 
            "title": "About Reactive Blocks."
        }, 
        {
            "location": "/Bitreactive_tutorial/#references", 
            "text": "Block by Block Towards IoT Applications\nIntegrating Reactive Block with JamaicaVM", 
            "title": "References:"
        }, 
        {
            "location": "/Bitreactive_tutorial/#about-agrinode-bundle", 
            "text": "In this post, I share the workflow of \"AgriNode\" bundle that will be installed into Eclipse Kura based gateway. The gateway has MQTT server which sensor nodes connect to.\nThe bundle purpose is to send a command for getting data to sensor nodes via MQTT (with a gateway server: 172.16.1.1:1883). After receiving the command from the gateway, sensor nodes take sensors reading then send data back to the gateway. The gateway then forwards data to the cloud via MQTT protocol (with another broker: blocks2.bitreactive.com).", 
            "title": "About \"AgriNode bundle\"."
        }, 
        {
            "location": "/Bitreactive_tutorial/#requierment", 
            "text": "Eclipse\nInstall Reactive Blocks for Kura", 
            "title": "Requierment."
        }, 
        {
            "location": "/Bitreactive_tutorial/#build-the-agrinode-bundle-with-reactive-blocks", 
            "text": "Block 1 - Periodic Toggler: To emit a signal (to publish a command message to sensor nodes) every configurable duration, The duration is configurable through Eclipse Kura configuration.    Block 2 - MQTT Publish: This block publishes messages on the local MQTT Broker (172.16.1.1:1883). \"init\" function:    public MQTTConfigParam init() {\nMQTTConfigParam p = new MQTTConfigParam( 172.16.1.1 );\nreturn p;\n}   Block 3 - MQTT subscriber: This block subscribes to messages from sensor nodes (node01, node02,...) on the local MQTT Broker (172.16.1.1:1883). \"init1\" function:   public MQTTConfigParam init1() {\nMQTTConfigParam p1 = new MQTTConfigParam( 172.16.1.1 );\np1.addSubscribeTopic( node02_data );\np1.addSubscribeTopic( node01_data );\nreturn p1;\n}   Block 4 - MQTT Publish: This block publishes messages on the cloud MQTT Broker (blocks2.bitreactive.com). \"init2\" function:   public MQTTConfigParam init2() {\nMQTTConfigParam p2 = new MQTTConfigParam( blocks2.bitreactive.com );\nreturn p2;\n}", 
            "title": "Build the Agrinode bundle with Reactive Blocks."
        }, 
        {
            "location": "/Bitreactive_tutorial/#deploy-the-bundle", 
            "text": "First, build the project for Kura --  quick build to make a  .dp file --  install  .dp file via Kura Web ui.", 
            "title": "Deploy the bundle"
        }, 
        {
            "location": "/Bitreactive_tutorial/#test-result", 
            "text": "The data is now available at  http://agrinode.mybluemix.net/ui/  The bundle works fine but there is an error that needs to be fixed (I am working on it).  The problem is that the bundle will not send any data to the cloud and can not reconnect to the cloud broker if the internet connection lost occurs. The Block 4 will disconnect and not reconnect to the broker if there is any error.  The only way to get the bundle works again is to reboot the gateway. \nThe picture below figures out this issue:", 
            "title": "Test result."
        }, 
        {
            "location": "/openhab2_weather_demo/", 
            "text": "tra c\u1ee9u WOEID", 
            "title": "OpenHAB2 yahoo weather binding"
        }, 
        {
            "location": "/openhab2_mqtt/", 
            "text": "OpenHab2 - MQTT binding demo\n\n\nThis demo demonstrates how to use MQTT binding addon in OpenHAB2 installed into Orange Pi zero.\nThe idea is very basic. A switch is created on default sitemap. When you turn on the switch, it sends \"ON\" message to Topic \n/office/light\n via MQTT broker that is installed on Orange Pi. When you turn off the switch, it sends \"OFF\" message to Topic \n/office/light\n.\n\n\nRequire\n\n\nOpenhab2\n\n\nMQTT broker installed.\n\n\nFirst, install MQTT binding via paperui\n\n\nDefine all the brokers which you want to connect to, in your \nservices/mqtt.cfg\n file.\n\n\ncd /etc/openhab2/services\n\nsudo nano mqtt.cfg\n\n\n\n\n\nThe file as follow\n\n\n#\n# Define your MQTT broker connections here for use in the MQTT Binding or MQTT\n# Persistence bundles. Replace \nbroker\n with an ID you choose.\n#\n\n# URL to the MQTT broker, e.g. tcp://localhost:1883 or ssl://localhost:8883\nmosquitto.url=tcp://localhost:1883\n\n# Optional. Client id (max 23 chars) to use when connecting to the broker.\n# If not provided a default one is generated.\nmosquitto.clientId=lion\n\n# Optional. User id to authenticate with the broker.\n#\nbroker\n.user=\nuser\n\n\n# Optional. Password to authenticate with the broker.\n#\nbroker\n.pwd=\npassword\n\n\n\n\n\n\nDefine demo item in \ndemo.items\n\n\nSwitch mySwitch {mqtt=\"\n[mosquitto:/office/light:command:ON:1],\n[mosquitto:/office/light:command:OFF:0]\"}\n\n\nDefine sitemap\n\n\nsitemap default label=\nMy first sitemap\n\n{\n    Switch item=mySwitch label=\nOffice Light\n\n\n}\n\n\n\n\n\n\n\nShow log file\n\n\nOpen terminal, then run:\n\n\ntail -f /var/log/openhab2/openhab.log", 
            "title": "OpenHAB2 MQTT binding"
        }, 
        {
            "location": "/openhab2_mqtt/#openhab2-mqtt-binding-demo", 
            "text": "This demo demonstrates how to use MQTT binding addon in OpenHAB2 installed into Orange Pi zero.\nThe idea is very basic. A switch is created on default sitemap. When you turn on the switch, it sends \"ON\" message to Topic  /office/light  via MQTT broker that is installed on Orange Pi. When you turn off the switch, it sends \"OFF\" message to Topic  /office/light .", 
            "title": "OpenHab2 - MQTT binding demo"
        }, 
        {
            "location": "/openhab2_mqtt/#require", 
            "text": "Openhab2  MQTT broker installed.", 
            "title": "Require"
        }, 
        {
            "location": "/openhab2_mqtt/#first-install-mqtt-binding-via-paperui", 
            "text": "Define all the brokers which you want to connect to, in your  services/mqtt.cfg  file.  cd /etc/openhab2/services\n\nsudo nano mqtt.cfg  The file as follow  #\n# Define your MQTT broker connections here for use in the MQTT Binding or MQTT\n# Persistence bundles. Replace  broker  with an ID you choose.\n#\n\n# URL to the MQTT broker, e.g. tcp://localhost:1883 or ssl://localhost:8883\nmosquitto.url=tcp://localhost:1883\n\n# Optional. Client id (max 23 chars) to use when connecting to the broker.\n# If not provided a default one is generated.\nmosquitto.clientId=lion\n\n# Optional. User id to authenticate with the broker.\n# broker .user= user \n\n# Optional. Password to authenticate with the broker.\n# broker .pwd= password", 
            "title": "First, install MQTT binding via paperui"
        }, 
        {
            "location": "/openhab2_mqtt/#define-demo-item-in-demoitems", 
            "text": "Switch mySwitch {mqtt=\" [mosquitto:/office/light:command:ON:1], [mosquitto:/office/light:command:OFF:0]\"}", 
            "title": "Define demo item in demo.items"
        }, 
        {
            "location": "/openhab2_mqtt/#define-sitemap", 
            "text": "sitemap default label= My first sitemap \n{\n    Switch item=mySwitch label= Office Light \n\n}", 
            "title": "Define sitemap"
        }, 
        {
            "location": "/openhab2_mqtt/#show-log-file", 
            "text": "Open terminal, then run:  tail -f /var/log/openhab2/openhab.log", 
            "title": "Show log file"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/", 
            "text": "Running Hello_world application ( based on Zephyr RTOS ) on Arduino Due\n\n\nZephyr Project goal is to build a best-in-breed small, scalable, real-time operation system (RTOS) for variety of IoT devices, such as X86 boards (Arduino 101, Galileo, Intel Quark D2000 development board,..), ARM boards (96Boards, Arduino Due, CC3200 LauchXL, Curie, NXP FRDM, ST Nucleo,...) ARC Boards, NIOS II Boards, XTENSA Boards.\n\n\nIn this post, we test a Hello_world application ( based on Zephyr RTOS ) on Arduino Due\n\n\nRequirement\n\n\n\n\nHost Computer: Ubuntu 16.04 LTS 64-bit\n\n\nDevice: Arduino Due\n\n\n\n\n1. Setup development environment\n\n\n\n\nUpdate your OS\n\n\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n\n\n\n\n\nInstall requirements\n\n\n\n\n$ sudo apt-get install git make gcc g++ python3-ply ncurses-dev \\\n      python3-yaml python2.7 dfu-util \n\n\n\n\n\n\n\n\nInstall the Zephyr SDK\n\n\n\n\n\n\nDownload the latest SDK self-extractable binary.\n\n\n\n\n\n\n$ wget https://github.com/zephyrproject-rtos/meta-zephyr-sdk/releases/download/0.9.1/zephyr-sdk-0.9.1-setup.run\n\n\n\n\nRun the installation binary\n\n\n\n\n$ chmod +x zephyr-sdk-0.9.1-setup.run\n$ ./zephyr-sdk-0.9.1-setup.run\n\n\n\n\n\n\nTo use the Zephyr SDK, export the following environment variables and use the target location where SDK was installed, type:\n\n\n\n\n$ export ZEPHYR_GCC_VARIANT=zephyr\n$ export ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk\n\n\n\n\n2. Download Zephyr project\n\n\n$ git clone https://github.com/zephyrproject-rtos/zephyr.git\n\n\n3. Building a Hello_World Application\n\n\n$ export ZEPHYR_GCC_VARIANT=zephyr\n$ export ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk\n$ cd zephyr \n$ source zephyr-env.sh\n$ cd samples/hello_world\n$ make BOARD=arduino_due\n\n\n\n\nAfter building an application successfully, the results can be found in the \nsamples/hello_world/outdir/arduino_due\n directory\n\n\n4. Flashing the Zephyr kernel onto Arduino Due\n\n\nFlashing the Zephyr kernel onto Arduino Due requires the bossa tool.\nInstall BOSSA tool\n\n\n$ sudo apt install bossa-cli\n\n\nMake sure that you are in the directory \n/samples/hello_world\n\n\nConnect the Arduino Due to your host computer using the programming port.\nPress the Erase button for more than 220 ms.\nPress the Reset button so the board will boot into the SAM-BA bootloader.\n\n\n$ bossac -p ttyACM0 -e -w -v -b outdir/arduino_due/zephyr.bin\n\n\n\n\nIf you are unable to upload to Arduino board, please change permission on serial port. Type the following command: \n\n\n\n\nchmod a+rw /ttyACM0\n\n\n5. Check for the output\n\n\n$ minicom -D /dev/ttyACM0\n\n\nPress the Reset button and you should see \n\u201cHello World!\u201d\n in your terminal.", 
            "title": "Hello World on Arduino Due"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#running-hello_world-application-based-on-zephyr-rtos-on-arduino-due", 
            "text": "Zephyr Project goal is to build a best-in-breed small, scalable, real-time operation system (RTOS) for variety of IoT devices, such as X86 boards (Arduino 101, Galileo, Intel Quark D2000 development board,..), ARM boards (96Boards, Arduino Due, CC3200 LauchXL, Curie, NXP FRDM, ST Nucleo,...) ARC Boards, NIOS II Boards, XTENSA Boards.  In this post, we test a Hello_world application ( based on Zephyr RTOS ) on Arduino Due", 
            "title": "Running Hello_world application ( based on Zephyr RTOS ) on Arduino Due"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#requirement", 
            "text": "Host Computer: Ubuntu 16.04 LTS 64-bit  Device: Arduino Due", 
            "title": "Requirement"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#1-setup-development-environment", 
            "text": "Update your OS   $ sudo apt-get update\n$ sudo apt-get upgrade   Install requirements   $ sudo apt-get install git make gcc g++ python3-ply ncurses-dev \\\n      python3-yaml python2.7 dfu-util     Install the Zephyr SDK    Download the latest SDK self-extractable binary.    $ wget https://github.com/zephyrproject-rtos/meta-zephyr-sdk/releases/download/0.9.1/zephyr-sdk-0.9.1-setup.run   Run the installation binary   $ chmod +x zephyr-sdk-0.9.1-setup.run\n$ ./zephyr-sdk-0.9.1-setup.run   To use the Zephyr SDK, export the following environment variables and use the target location where SDK was installed, type:   $ export ZEPHYR_GCC_VARIANT=zephyr\n$ export ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk", 
            "title": "1. Setup development environment"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#2-download-zephyr-project", 
            "text": "$ git clone https://github.com/zephyrproject-rtos/zephyr.git", 
            "title": "2. Download Zephyr project"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#3-building-a-hello_world-application", 
            "text": "$ export ZEPHYR_GCC_VARIANT=zephyr\n$ export ZEPHYR_SDK_INSTALL_DIR=/opt/zephyr-sdk\n$ cd zephyr \n$ source zephyr-env.sh\n$ cd samples/hello_world\n$ make BOARD=arduino_due  After building an application successfully, the results can be found in the  samples/hello_world/outdir/arduino_due  directory", 
            "title": "3. Building a Hello_World Application"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#4-flashing-the-zephyr-kernel-onto-arduino-due", 
            "text": "Flashing the Zephyr kernel onto Arduino Due requires the bossa tool.\nInstall BOSSA tool  $ sudo apt install bossa-cli  Make sure that you are in the directory  /samples/hello_world  Connect the Arduino Due to your host computer using the programming port.\nPress the Erase button for more than 220 ms.\nPress the Reset button so the board will boot into the SAM-BA bootloader.  $ bossac -p ttyACM0 -e -w -v -b outdir/arduino_due/zephyr.bin   If you are unable to upload to Arduino board, please change permission on serial port. Type the following command:    chmod a+rw /ttyACM0", 
            "title": "4. Flashing the Zephyr kernel onto Arduino Due"
        }, 
        {
            "location": "/install_zephyr_os_on_arduino_due/#5-check-for-the-output", 
            "text": "$ minicom -D /dev/ttyACM0  Press the Reset button and you should see  \u201cHello World!\u201d  in your terminal.", 
            "title": "5. Check for the output"
        }, 
        {
            "location": "/install_windows_iot_core/", 
            "text": "Installing Windows 10 IoT Core for Raspberry Pi\n\n\nIn this post I will be going to process of how to install Windows 10 IoT core for Raspberry Pi 2.\nFor more information about Windows IoT Core, please visit the official site \nhttps://developer.microsoft.com/en-us/windows/iot/docs\n. Windows IoT core is the operating system built for Internet of Things.\n\n\nRequirement:\n\n\n\n\nWindows 10 PC\n\n\nSD Card\n\n\nRaspberry Pi 2\n\n\n\n\nGet started\n\n\n1. Download OS for Raspberry Pi\n\n\nFirstly, we need to download Windows 10 IoT core package for Raspberry Pi 2 on the official website:\n\nhttps://developer.microsoft.com/en-us/windows/iot/Downloads\n\nAfter downloading the package, we then Install Windows IoT Core For Raspberry Pi on your PC.\nDouble-click on the file downloaded and install Windows 10 IoT Core for Raspberry Pi.\n\n\n\n\nAfter installing, the flash file will be saved in your C drive \n(C:\\Program Files (x86)\\Microsoft IoT\\FFU\\RaspberryPi2\\flash.ffu)\n\n\n2. Download and install Windows ADK\n\n\nhttps://developer.microsoft.com/en-us/windows/hardware/windows-assessment-deployment-kit\n\nPleck check on \u201cImaging and Configuration Designer (ICD)\u201d\nTo create and apply FFU images for Windows 10, Version 1607 and earlier, you can use Windows Imaging and Configuration Designer (ICD) which is included in the Windows Assessment and Deployment Kit (ADK) for Windows 10, Version 1607. You can use the Windows 10 version of DISM, which is included in the Windows 10 version of Windows Preinstallation Environment (WinPE)to apply FFU images\n\n\nApply the image to a drive. For a physical drive X:, the string should be the following form: \n\\\\.\\PhysicalDriveX\n, where \nX\n is the disk number that diskpart provides, such as \n\\\\.\\PhysicalDrive1.\n Hard disk numbers start at zero. For more information about \nPhysicalDriveX\n, see CreateFile function.\n\n\nTo check PhycicalDriverX, open CMD\n\n\ndiskpart\n\n\nlist disk\n\n\nexit\n\n\nAt this point. Copy flash.ffu file to \nC:/\n Then execute the command:\n\n\nDISM /Apply-Image /ImageFile:C:\\flash.ffu /ApplyDrive:\\\\.\\PhysicalDrive1 /SkipPlatformCheck\n\n\nFor more information about \n/SkipPlatformCheck\n, see Apply-Image in DISM image management command-line options\n\n\n\n\nNow the Windows IoT is ready to use. Remove the SD card from PC and plug it into Raspberry Pi 2. Connect internet cable and power the board. Raspberry Pi will boot into Windows 10 IoT OS.", 
            "title": "Install Window 10 IoT Core on Raspberry Pi 2"
        }, 
        {
            "location": "/install_windows_iot_core/#installing-windows-10-iot-core-for-raspberry-pi", 
            "text": "In this post I will be going to process of how to install Windows 10 IoT core for Raspberry Pi 2.\nFor more information about Windows IoT Core, please visit the official site  https://developer.microsoft.com/en-us/windows/iot/docs . Windows IoT core is the operating system built for Internet of Things.", 
            "title": "Installing Windows 10 IoT Core for Raspberry Pi"
        }, 
        {
            "location": "/install_windows_iot_core/#requirement", 
            "text": "Windows 10 PC  SD Card  Raspberry Pi 2", 
            "title": "Requirement:"
        }, 
        {
            "location": "/install_windows_iot_core/#get-started", 
            "text": "", 
            "title": "Get started"
        }, 
        {
            "location": "/install_windows_iot_core/#1-download-os-for-raspberry-pi", 
            "text": "Firstly, we need to download Windows 10 IoT core package for Raspberry Pi 2 on the official website: https://developer.microsoft.com/en-us/windows/iot/Downloads \nAfter downloading the package, we then Install Windows IoT Core For Raspberry Pi on your PC.\nDouble-click on the file downloaded and install Windows 10 IoT Core for Raspberry Pi.   After installing, the flash file will be saved in your C drive  (C:\\Program Files (x86)\\Microsoft IoT\\FFU\\RaspberryPi2\\flash.ffu)", 
            "title": "1. Download OS for Raspberry Pi"
        }, 
        {
            "location": "/install_windows_iot_core/#2-download-and-install-windows-adk", 
            "text": "https://developer.microsoft.com/en-us/windows/hardware/windows-assessment-deployment-kit \nPleck check on \u201cImaging and Configuration Designer (ICD)\u201d\nTo create and apply FFU images for Windows 10, Version 1607 and earlier, you can use Windows Imaging and Configuration Designer (ICD) which is included in the Windows Assessment and Deployment Kit (ADK) for Windows 10, Version 1607. You can use the Windows 10 version of DISM, which is included in the Windows 10 version of Windows Preinstallation Environment (WinPE)to apply FFU images  Apply the image to a drive. For a physical drive X:, the string should be the following form:  \\\\.\\PhysicalDriveX , where  X  is the disk number that diskpart provides, such as  \\\\.\\PhysicalDrive1.  Hard disk numbers start at zero. For more information about  PhysicalDriveX , see CreateFile function.  To check PhycicalDriverX, open CMD  diskpart  list disk  exit  At this point. Copy flash.ffu file to  C:/  Then execute the command:  DISM /Apply-Image /ImageFile:C:\\flash.ffu /ApplyDrive:\\\\.\\PhysicalDrive1 /SkipPlatformCheck  For more information about  /SkipPlatformCheck , see Apply-Image in DISM image management command-line options   Now the Windows IoT is ready to use. Remove the SD card from PC and plug it into Raspberry Pi 2. Connect internet cable and power the board. Raspberry Pi will boot into Windows 10 IoT OS.", 
            "title": "2. Download and install Windows ADK"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/", 
            "text": "Get stated with Python \nFlask\n Frame work on IBM Bluemix\n\n\nThis work is based on \nGetting started with Python on Bluemix Tutorial\n\n\nThe tutorial will develop a Python web application based on Flask framwork and deploy the app on \nIBM Bluemix\n. The app shows up a basic form which users can type their names. When hit enter the name will be add to database and can be access at \nhttp://base_url/api/visitors\n  \n\n\n1. Requirement\n\n\n\n\nGit\n\n\nCf\n\n\nPython\n\n\n\n\n2. Clone example code and run locally\n\n\n\n\nRename your app\n  Open up \nmanifest.yml\n, similar like:\n\n\n\n\n```\n    applications:\n        - name: Lecheebot\n        random-route: true\n        memory: 128M\n\n\n``\n- Run your app locally\n  Ensure that you have installed\npip` in your PC. If not, follow this post: \npip and setuptool on windows\n\n\nnow, you can run your app locally by typing the command:\n\n\npip install -r requirements.txt\n\n\npython hello.py\n\n\nYour app is now accessible at: \nhttp://localhost:8080\n\n\n3. Deploy to IBM Bluemix using Cloud Foudry CLI\n\n\nEnsure you have \nIBM Bluemix\n accout and installed CF CLI on your machine. if not, follow the steps: [\nhttps://github.com/cloudfoundry/cli#downloads\n\n\n\n\nLog in to CF CLI\n\n\n\n\nRun CMD as administrator, then login to CF with the commands:\n\n\ncf api https://api.ng.bluemix.net\n\n\ncf login\n\n\nEnter your email and password.\n\n\n\n\nDeploy your app\n\n\n\n\nOpen CMD at your app reposit that you cloned in the step 2.\nExecute the command to deploy your app:\n\n\ncf push\n\n\nYou can view your app status by the command:\n\n\ncf apps\n\n\n4. Add Database\n\n\n\n\n\n\nTo connect to Cloudant noSQL DB, follow these steps:\n\n\n\n\n\n\nLogin Bluemix accout\n\n\n\n\nNavigate to your app. Click on \"Connect new\" button on Connections Group. Choose Cloudant NoSQL DB service on the categories. Finally click Create button.\n\n\nEnsure that you connect Cloudant NoSQL DB service to your application. If not, click on the \"Connect existing\" to connect with service.\n\n\n\n\nYou can test your app at your app url.\n\n\n\n\n\n\nTo connect Database for working locally:\n\n\n\n\n\n\nCreate a file with th name \nvcap-local.json\n\n\n\n\nAdd the following detail:\n\n\n\n\n{\n \nservices\n: {\n   \ncloudantNoSQLDB\n: [\n     {\n       \ncredentials\n: {\n        \nusername\n: \nyour_username\n,\n        \npassword\n: \nyour_password\n,\n        \nhost\n: \nyour_host\n,\n        \nport\n: 443,\n        \nurl\n: \nyoururl\n\n\n       },\n       \nlabel\n: \ncloudantNoSQLDB\n\n     }\n   ]\n }\n}\n\n\n\n\nYou can find username, password, host by click on Cloudant NoSQL DB service at your IBM Blumix console. Then click on \"Service Credentials\". Copy and pass information to your \nvcap-local.json\n file.\n\n\n\n\nNow you can test your app locally with the database:\n\n\npython hello.py", 
            "title": "Install Python Flask on IBM Bluemix"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/#get-stated-with-python-flask-frame-work-on-ibm-bluemix", 
            "text": "This work is based on  Getting started with Python on Bluemix Tutorial  The tutorial will develop a Python web application based on Flask framwork and deploy the app on  IBM Bluemix . The app shows up a basic form which users can type their names. When hit enter the name will be add to database and can be access at  http://base_url/api/visitors", 
            "title": "Get stated with Python Flask Frame work on IBM Bluemix"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/#1-requirement", 
            "text": "Git  Cf  Python", 
            "title": "1. Requirement"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/#2-clone-example-code-and-run-locally", 
            "text": "Rename your app\n  Open up  manifest.yml , similar like:   ```\n    applications:\n        - name: Lecheebot\n        random-route: true\n        memory: 128M  ``\n- Run your app locally\n  Ensure that you have installed pip` in your PC. If not, follow this post:  pip and setuptool on windows  now, you can run your app locally by typing the command:  pip install -r requirements.txt  python hello.py  Your app is now accessible at:  http://localhost:8080", 
            "title": "2. Clone example code and run locally"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/#3-deploy-to-ibm-bluemix-using-cloud-foudry-cli", 
            "text": "Ensure you have  IBM Bluemix  accout and installed CF CLI on your machine. if not, follow the steps: [ https://github.com/cloudfoundry/cli#downloads   Log in to CF CLI   Run CMD as administrator, then login to CF with the commands:  cf api https://api.ng.bluemix.net  cf login  Enter your email and password.   Deploy your app   Open CMD at your app reposit that you cloned in the step 2.\nExecute the command to deploy your app:  cf push  You can view your app status by the command:  cf apps", 
            "title": "3. Deploy to IBM Bluemix using Cloud Foudry CLI"
        }, 
        {
            "location": "/Install_python_flask_on_ibm_bluemix/#4-add-database", 
            "text": "To connect to Cloudant noSQL DB, follow these steps:    Login Bluemix accout   Navigate to your app. Click on \"Connect new\" button on Connections Group. Choose Cloudant NoSQL DB service on the categories. Finally click Create button.  Ensure that you connect Cloudant NoSQL DB service to your application. If not, click on the \"Connect existing\" to connect with service.   You can test your app at your app url.    To connect Database for working locally:    Create a file with th name  vcap-local.json   Add the following detail:   {\n  services : {\n    cloudantNoSQLDB : [\n     {\n        credentials : {\n         username :  your_username ,\n         password :  your_password ,\n         host :  your_host ,\n         port : 443,\n         url :  yoururl \n\n       },\n        label :  cloudantNoSQLDB \n     }\n   ]\n }\n}  You can find username, password, host by click on Cloudant NoSQL DB service at your IBM Blumix console. Then click on \"Service Credentials\". Copy and pass information to your  vcap-local.json  file.   Now you can test your app locally with the database:  python hello.py", 
            "title": "4. Add Database"
        }
    ]
}