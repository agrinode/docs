{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Agrinode Project\n\n\nHomepage: \nhttps://agrinode.github.io\n\n\nBuilding Wireless Sensor Network for Agriculture Applications\n\n\nWe are participant in \nOpenIoTChallenge 3.0\n\n\n\n\nAny comments, suggestions are welcome.\n\n\nFeel free to share your ideas in our blog: \nAgrinode Blogspot", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-agrinode-project", 
            "text": "Homepage:  https://agrinode.github.io", 
            "title": "Welcome to Agrinode Project"
        }, 
        {
            "location": "/#building-wireless-sensor-network-for-agriculture-applications", 
            "text": "", 
            "title": "Building Wireless Sensor Network for Agriculture Applications"
        }, 
        {
            "location": "/#we-are-participant-in-openiotchallenge-30", 
            "text": "Any comments, suggestions are welcome.  Feel free to share your ideas in our blog:  Agrinode Blogspot", 
            "title": "We are participant in OpenIoTChallenge 3.0"
        }, 
        {
            "location": "/system_architech/", 
            "text": "System Architecture for AgriNode project.", 
            "title": "System Architecture"
        }, 
        {
            "location": "/system_architech/#system-architecture-for-agrinode-project", 
            "text": "", 
            "title": "System Architecture for AgriNode project."
        }, 
        {
            "location": "/mqtt_demo/", 
            "text": "Mosquitto\n(MQTT broker) Demo\n\n\nMQTT stands for Message Queuing Telemetry Transport which is an ISO standard (ISO/IEC PRF 20922) publish-subscribe-based \"lightweight\" messaging protocol for use on top of the TCP/IP protocol. It is designed for connections to remote locations where a \"small code footprint\" is required or the network bandwidth is limited. The publish-subscribe messaging pattern requires a message broker. The broker is responsible for distributing messages to interested clients based on the topic of a message. Andy Stanford-Clark and Arlen Nipper of Cirrus Link Solutions authored the first version of the protocol in 1999 \n[1]\n. \n\n\nIn this demo, I work on Mosquitto platform (An Open source MQTT v3.1/v3.1.1 Broker)\n\n\nThe picture shows the basic MQTT protocol. MQTT broker - Mosquitto is installed into a Gateway - \nKura based\n (Hardware: Raspberry Pi 2; OS: Raspbian). The clients - Publisher/Subscriber connect to MQTT broker via WiFi which is established by the PC. The Subscriber is an Arduino board with WiFi module that subscribes a Topic (for example \"Node01\") to receive a message. The Publisher is a smartphone running MQTT client software that will publish a message to a topic (for example \"Node01\").\n\n\n\n\nRequirements\n\n\n\n\nHardwares: Raspberry Pi 2 (WiFi dongle); Arduino with WiFi module (Adafruit Huzzah Esp8266); Smartphone (Android, IOS)\n\n\n\n\n* Step 1: Setup Kura into Raspberry Pi\n\n\nThe picture shows the Gateway hardware which consists of Raspberry Pi and WiFi dongle.\n\n\n\n\nFollow this link for installing Kura into Raspberry Pi: \nhttp://eclipse.github.io/kura/doc/raspberry-pi-quick-start.html\n\n\nWe setup the Raspbery Pi in the Access Point mode for providing WiFi connection:\n\n\n\n\n* Step 2: Install Mosquitto broker into Raspberry Pi\n\n\nWe use Mosquitto platform as a MQTT broker running on Rapsberry Pi. It provides MQTT protocol for our sensor network system. For more information about MQTT protocol; please visit this page: \nwhat is MQTT and how does it work\n\n\nTo install Mosquitto, follow these steps:\n\n\nwget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\n\n\nsudo apt-key add mosquitto-repo.gpg.key\n\n\nThen make the repository available to apt:\n\n\ncd /etc/apt/sources.list.d/\n\n\nThen one of the following, depending on which version of debian you are using:\n\n\nsudo wget http://repo.mosquitto.org/debian/mosquitto-wheezy.list\nsudo wget http://repo.mosquitto.org/debian/mosquitto-jessie.list\n\n\nThen update apt information:\n\n\napt-get update\n\n\nAnd discover what mosquitto packages are available:\n\n\napt-cache search mosquitto\n\n\nOr just install:\n\n\napt-get install mosquitto\n\n\nFor more information, please follow this link: \nhttp://mosquitto.org/2013/01/mosquitto-debian-repository/\n\n\n* Step 3: Install MQTT demo code for Arduino\n\n\nThe Huzzah esp8266 board will receive the message from the phone in order to control a LED (connected to pin #0). The LED will be turned off if Huzzah receives message \"a\" and turn on with others messages.\n\n\n\n\nThere are many MQTT libraries for Arduino platform. For this demo, I use MQTT library created by Joel Gahwiler \n(available in Github)\n\n\nIt is installed into Ardafruit Huzzah Esp8266 board.\n\n\nIn the sketch, we need to define these parameters:\n\n\n\"firstly, we need to connect Arduino Huzzah to the Gateway via WiFi connection which is established by the Gateway\"\n\n\nssid = \"YOUR_WIFI_NAME\"\n   //WiFi connection established from the Gateway\n\n\npass = \"YOUR_WIFI_PASSWORD\"\n \n\n\nThen replace \n\"broker.shiftr.io\"\n by \n172.16.1.1\n for MQTT broker\n\n\nFinally, define subscribe topic \nclient.subscribe(\"node01\");\n for receiving message payload from the publisher.\n\n\nFull code here:\n\n\n#include \nESP8266WiFi.h\n\n\n#include \nMQTTClient.h\n\n\nconst char *ssid = \nagrinode\n;\n\nconst char *pass = \n12345678\n;\n\nWiFiClient net;\n\nMQTTClient client;\n\nunsigned long lastMillis = 0;\n\nvoid connect(); // \n- predefine connect() for setup()\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n  WiFi.begin(ssid, pass);\n\n  client.begin(\n172.16.1.1\n, net);\n\n  pinMode(0,OUTPUT);\n\n  connect();\n\n}\n\nvoid connect() {\n\n ` Serial.print(\nchecking wifi...\n);\n\n` while (WiFi.status() != WL_CONNECTED) {`\n\n `   Serial.print(\n.\n);`\n\n  `  delay(1000);`\n\n ` }`\n\n ` Serial.print(\n\\nconnecting...\n);`\n\n  `while (!client.connect(\narduino\n, \ntry\n, \ntry\n)) {`\n\n  `  Serial.print(\n.\n);`\n\n   ` delay(1000);`\n\n ` }`\n\n  `Serial.println(\n\\nconnected!\n);`\n\n ` client.subscribe(\nnode01\n);`\n\n  `// client.unsubscribe(\n/example\n);`\n\n}\n\nvoid loop() {\n\n  client.loop();\n\n  delay(10); // \n- fixes some issues with WiFi stability\n\n  if(!client.connected()) {\n\n    connect();\n\n  }\n\n  // publish a message roughly every second.\n\n  if(millis() - lastMillis \n 1000) {\n\n   lastMillis = millis();\n\n    client.publish(\n/hello\n, \nworld\n);\n\n  }\n\n}\n\nvoid messageReceived(String topic, String payload, char * bytes, unsigned int length) {\n\n  Serial.print(\nincoming: \n);\n\n  Serial.print(topic);\n\n  Serial.print(\n - \n);\n\n  Serial.print(payload);\n\n  Serial.println();\n\n  if (payload==\na\n){digitalWrite(0,HIGH);}\n\n  else digitalWrite(0,LOW);\n\n}\n\n\n\n\n* Step 4: Install MQTT client software for Android phone\n\n\nThere are many softwares available for MQTT protocol testing. I use \nMyMQTT\n for my Android phone.\n\n\n\n\nFor \"Setting\": we need MQTT broker host (it is the Gateway IP: \n172.16.1.1:1883\n) and \"Topic\" for publishing message (it is: \nNode01\n).\n\n\nFor publishing a message: navigate to \"Publish\" button -\n then fill in the Topic (\nNode01\n) and message.\n\n\n* Demo Video\n\n\n\n\n\nRefferences\n\n\n[1] \nhttps://en.wikipedia.org/wiki/MQTT", 
            "title": "MQTT demo"
        }, 
        {
            "location": "/mqtt_demo/#mosquittomqtt-broker-demo", 
            "text": "MQTT stands for Message Queuing Telemetry Transport which is an ISO standard (ISO/IEC PRF 20922) publish-subscribe-based \"lightweight\" messaging protocol for use on top of the TCP/IP protocol. It is designed for connections to remote locations where a \"small code footprint\" is required or the network bandwidth is limited. The publish-subscribe messaging pattern requires a message broker. The broker is responsible for distributing messages to interested clients based on the topic of a message. Andy Stanford-Clark and Arlen Nipper of Cirrus Link Solutions authored the first version of the protocol in 1999  [1] .", 
            "title": "Mosquitto&nbsp;"
        }, 
        {
            "location": "/mqtt_demo/#in-this-demo-i-work-on-mosquitto-platform-an-open-source-mqtt-v31v311-broker", 
            "text": "The picture shows the basic MQTT protocol. MQTT broker - Mosquitto is installed into a Gateway -  Kura based  (Hardware: Raspberry Pi 2; OS: Raspbian). The clients - Publisher/Subscriber connect to MQTT broker via WiFi which is established by the PC. The Subscriber is an Arduino board with WiFi module that subscribes a Topic (for example \"Node01\") to receive a message. The Publisher is a smartphone running MQTT client software that will publish a message to a topic (for example \"Node01\").", 
            "title": "In this demo, I work on Mosquitto platform (An Open source MQTT v3.1/v3.1.1 Broker)"
        }, 
        {
            "location": "/mqtt_demo/#requirements", 
            "text": "Hardwares: Raspberry Pi 2 (WiFi dongle); Arduino with WiFi module (Adafruit Huzzah Esp8266); Smartphone (Android, IOS)", 
            "title": "Requirements"
        }, 
        {
            "location": "/mqtt_demo/#step-1-setup-kura-into-raspberry-pi", 
            "text": "The picture shows the Gateway hardware which consists of Raspberry Pi and WiFi dongle.   Follow this link for installing Kura into Raspberry Pi:  http://eclipse.github.io/kura/doc/raspberry-pi-quick-start.html  We setup the Raspbery Pi in the Access Point mode for providing WiFi connection:", 
            "title": "* Step 1: Setup Kura into Raspberry Pi"
        }, 
        {
            "location": "/mqtt_demo/#step-2-install-mosquitto-broker-into-raspberry-pi", 
            "text": "We use Mosquitto platform as a MQTT broker running on Rapsberry Pi. It provides MQTT protocol for our sensor network system. For more information about MQTT protocol; please visit this page:  what is MQTT and how does it work  To install Mosquitto, follow these steps:  wget http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key  sudo apt-key add mosquitto-repo.gpg.key  Then make the repository available to apt:  cd /etc/apt/sources.list.d/  Then one of the following, depending on which version of debian you are using:  sudo wget http://repo.mosquitto.org/debian/mosquitto-wheezy.list\nsudo wget http://repo.mosquitto.org/debian/mosquitto-jessie.list  Then update apt information:  apt-get update  And discover what mosquitto packages are available:  apt-cache search mosquitto  Or just install:  apt-get install mosquitto  For more information, please follow this link:  http://mosquitto.org/2013/01/mosquitto-debian-repository/", 
            "title": "* Step 2: Install Mosquitto broker into Raspberry Pi"
        }, 
        {
            "location": "/mqtt_demo/#step-3-install-mqtt-demo-code-for-arduino", 
            "text": "The Huzzah esp8266 board will receive the message from the phone in order to control a LED (connected to pin #0). The LED will be turned off if Huzzah receives message \"a\" and turn on with others messages.   There are many MQTT libraries for Arduino platform. For this demo, I use MQTT library created by Joel Gahwiler  (available in Github)  It is installed into Ardafruit Huzzah Esp8266 board.  In the sketch, we need to define these parameters:  \"firstly, we need to connect Arduino Huzzah to the Gateway via WiFi connection which is established by the Gateway\"  ssid = \"YOUR_WIFI_NAME\"    //WiFi connection established from the Gateway  pass = \"YOUR_WIFI_PASSWORD\"    Then replace  \"broker.shiftr.io\"  by  172.16.1.1  for MQTT broker  Finally, define subscribe topic  client.subscribe(\"node01\");  for receiving message payload from the publisher.", 
            "title": "* Step 3: Install MQTT demo code for Arduino"
        }, 
        {
            "location": "/mqtt_demo/#full-code-here", 
            "text": "#include  ESP8266WiFi.h \n\n#include  MQTTClient.h \n\nconst char *ssid =  agrinode ;\n\nconst char *pass =  12345678 ;\n\nWiFiClient net;\n\nMQTTClient client;\n\nunsigned long lastMillis = 0;\n\nvoid connect(); //  - predefine connect() for setup()\n\nvoid setup() {\n\n  Serial.begin(9600);\n\n  WiFi.begin(ssid, pass);\n\n  client.begin( 172.16.1.1 , net);\n\n  pinMode(0,OUTPUT);\n\n  connect();\n\n}\n\nvoid connect() {\n\n ` Serial.print( checking wifi... );\n\n` while (WiFi.status() != WL_CONNECTED) {`\n\n `   Serial.print( . );`\n\n  `  delay(1000);`\n\n ` }`\n\n ` Serial.print( \\nconnecting... );`\n\n  `while (!client.connect( arduino ,  try ,  try )) {`\n\n  `  Serial.print( . );`\n\n   ` delay(1000);`\n\n ` }`\n\n  `Serial.println( \\nconnected! );`\n\n ` client.subscribe( node01 );`\n\n  `// client.unsubscribe( /example );`\n\n}\n\nvoid loop() {\n\n  client.loop();\n\n  delay(10); //  - fixes some issues with WiFi stability\n\n  if(!client.connected()) {\n\n    connect();\n\n  }\n\n  // publish a message roughly every second.\n\n  if(millis() - lastMillis   1000) {\n\n   lastMillis = millis();\n\n    client.publish( /hello ,  world );\n\n  }\n\n}\n\nvoid messageReceived(String topic, String payload, char * bytes, unsigned int length) {\n\n  Serial.print( incoming:  );\n\n  Serial.print(topic);\n\n  Serial.print(  -  );\n\n  Serial.print(payload);\n\n  Serial.println();\n\n  if (payload== a ){digitalWrite(0,HIGH);}\n\n  else digitalWrite(0,LOW);\n\n}", 
            "title": "Full code here:"
        }, 
        {
            "location": "/mqtt_demo/#step-4-install-mqtt-client-software-for-android-phone", 
            "text": "There are many softwares available for MQTT protocol testing. I use  MyMQTT  for my Android phone.   For \"Setting\": we need MQTT broker host (it is the Gateway IP:  172.16.1.1:1883 ) and \"Topic\" for publishing message (it is:  Node01 ).  For publishing a message: navigate to \"Publish\" button -  then fill in the Topic ( Node01 ) and message.", 
            "title": "* Step 4: Install MQTT client software for Android phone"
        }, 
        {
            "location": "/mqtt_demo/#demo-video", 
            "text": "", 
            "title": "* Demo Video"
        }, 
        {
            "location": "/mqtt_demo/#refferences", 
            "text": "[1]  https://en.wikipedia.org/wiki/MQTT", 
            "title": "Refferences"
        }, 
        {
            "location": "/Bitreactive_tutorial/", 
            "text": "Tutorial: Build a Configurable Eclipse Kura Application via Reactive Blocks\n\n\nSummary.\n\n\nThis tutorial demonstrates how to build a Kura application into a bundle by using Reactive Blocks.\n\n\nAbout Reactive Blocks.\n\n\nBitreactive provides the visual development environment that allows java users build their own IoT applications by simply connecting building blocks. Each Reactive Block is designed for a specific purpose such as connecting to Cloud platform (IBM Watson IoT, Xively,...), providing MQTT protocol, LoRaWAN interface,...\nReactive Blocks is a Plugin for Eclipse, which provides a development environment for a developer build a complex application by drag and drop reactive blocks from the Reactive Blocks libraries.\nFor me, I have a very basic knowledge of Java but I can build a complex java application with Reactive Blocks. Each block has a description in the form of input and output pins and contract. In addition, Reactive Blocks provides the analyze and animation tools which are helpful for testing the applications.\n\n\nReferences:\n\n\nBlock by Block Towards IoT Applications\nIntegrating Reactive Block with JamaicaVM\n\n\nAbout \"AgriNode bundle\".\n\n\nIn this post, I share the workflow of \"AgriNode\" bundle that will be installed into Eclipse Kura based gateway. The gateway has MQTT server which sensor nodes connect to.\nThe bundle purpose is to send a command for getting data to sensor nodes via MQTT (with a gateway server: 172.16.1.1:1883). After receiving the command from the gateway, sensor nodes take sensors reading then send data back to the gateway. The gateway then forwards data to the cloud via MQTT protocol (with another broker: blocks2.bitreactive.com).\n\n\nRequierment.\n\n\nEclipse\nInstall Reactive Blocks for Kura\n\n\nBuild the Agrinode bundle with Reactive Blocks.\n\n\n\n\n\n\n\n\nBlock 1 - Periodic Toggler: To emit a signal (to publish a command message to sensor nodes) every configurable duration, The duration is configurable through Eclipse Kura configuration.\n\n\n\n\n\n\nBlock 2 - MQTT Publish: This block publishes messages on the local MQTT Broker (172.16.1.1:1883). \"init\" function:\n\n\n\n\n\n\npublic MQTTConfigParam init() {\nMQTTConfigParam p = new MQTTConfigParam(\n172.16.1.1\n);\nreturn p;\n}\n\n\n\n\n\n\nBlock 3 - MQTT subscriber: This block subscribes to messages from sensor nodes (node01, node02,...) on the local MQTT Broker (172.16.1.1:1883). \"init1\" function:\n\n\n\n\npublic MQTTConfigParam init1() {\nMQTTConfigParam p1 = new MQTTConfigParam(\n172.16.1.1\n);\np1.addSubscribeTopic(\nnode02_data\n);\np1.addSubscribeTopic(\nnode01_data\n);\nreturn p1;\n}\n\n\n\n\n\n\nBlock 4 - MQTT Publish: This block publishes messages on the cloud MQTT Broker (blocks2.bitreactive.com). \"init2\" function:\n\n\n\n\npublic MQTTConfigParam init2() {\nMQTTConfigParam p2 = new MQTTConfigParam(\nblocks2.bitreactive.com\n);\nreturn p2;\n}\n\n\n\n\nDeploy the bundle\n\n\nFirst, build the project for Kura --\n quick build to make a \n.dp file --\n install \n.dp file via Kura Web ui.\n\n\n\n\nTest result.\n\n\nThe data is now available at \nhttp://agrinode.mybluemix.net/ui/\n\n\nThe bundle works fine but there is an error that needs to be fixed (I am working on it).\n\n\nThe problem is that the bundle will not send any data to the cloud and can not reconnect to the cloud broker if the internet connection lost occurs. The Block 4 will disconnect and not reconnect to the broker if there is any error.  The only way to get the bundle works again is to reboot the gateway.\n\nThe picture below figures out this issue:", 
            "title": "Bitreactive tutorial"
        }, 
        {
            "location": "/Bitreactive_tutorial/#tutorial-build-a-configurable-eclipse-kura-application-via-reactive-blocks", 
            "text": "", 
            "title": "Tutorial: Build a Configurable Eclipse Kura Application via Reactive Blocks"
        }, 
        {
            "location": "/Bitreactive_tutorial/#summary", 
            "text": "This tutorial demonstrates how to build a Kura application into a bundle by using Reactive Blocks.", 
            "title": "Summary."
        }, 
        {
            "location": "/Bitreactive_tutorial/#about-reactive-blocks", 
            "text": "Bitreactive provides the visual development environment that allows java users build their own IoT applications by simply connecting building blocks. Each Reactive Block is designed for a specific purpose such as connecting to Cloud platform (IBM Watson IoT, Xively,...), providing MQTT protocol, LoRaWAN interface,...\nReactive Blocks is a Plugin for Eclipse, which provides a development environment for a developer build a complex application by drag and drop reactive blocks from the Reactive Blocks libraries.\nFor me, I have a very basic knowledge of Java but I can build a complex java application with Reactive Blocks. Each block has a description in the form of input and output pins and contract. In addition, Reactive Blocks provides the analyze and animation tools which are helpful for testing the applications.", 
            "title": "About Reactive Blocks."
        }, 
        {
            "location": "/Bitreactive_tutorial/#references", 
            "text": "Block by Block Towards IoT Applications\nIntegrating Reactive Block with JamaicaVM", 
            "title": "References:"
        }, 
        {
            "location": "/Bitreactive_tutorial/#about-agrinode-bundle", 
            "text": "In this post, I share the workflow of \"AgriNode\" bundle that will be installed into Eclipse Kura based gateway. The gateway has MQTT server which sensor nodes connect to.\nThe bundle purpose is to send a command for getting data to sensor nodes via MQTT (with a gateway server: 172.16.1.1:1883). After receiving the command from the gateway, sensor nodes take sensors reading then send data back to the gateway. The gateway then forwards data to the cloud via MQTT protocol (with another broker: blocks2.bitreactive.com).", 
            "title": "About \"AgriNode bundle\"."
        }, 
        {
            "location": "/Bitreactive_tutorial/#requierment", 
            "text": "Eclipse\nInstall Reactive Blocks for Kura", 
            "title": "Requierment."
        }, 
        {
            "location": "/Bitreactive_tutorial/#build-the-agrinode-bundle-with-reactive-blocks", 
            "text": "Block 1 - Periodic Toggler: To emit a signal (to publish a command message to sensor nodes) every configurable duration, The duration is configurable through Eclipse Kura configuration.    Block 2 - MQTT Publish: This block publishes messages on the local MQTT Broker (172.16.1.1:1883). \"init\" function:    public MQTTConfigParam init() {\nMQTTConfigParam p = new MQTTConfigParam( 172.16.1.1 );\nreturn p;\n}   Block 3 - MQTT subscriber: This block subscribes to messages from sensor nodes (node01, node02,...) on the local MQTT Broker (172.16.1.1:1883). \"init1\" function:   public MQTTConfigParam init1() {\nMQTTConfigParam p1 = new MQTTConfigParam( 172.16.1.1 );\np1.addSubscribeTopic( node02_data );\np1.addSubscribeTopic( node01_data );\nreturn p1;\n}   Block 4 - MQTT Publish: This block publishes messages on the cloud MQTT Broker (blocks2.bitreactive.com). \"init2\" function:   public MQTTConfigParam init2() {\nMQTTConfigParam p2 = new MQTTConfigParam( blocks2.bitreactive.com );\nreturn p2;\n}", 
            "title": "Build the Agrinode bundle with Reactive Blocks."
        }, 
        {
            "location": "/Bitreactive_tutorial/#deploy-the-bundle", 
            "text": "First, build the project for Kura --  quick build to make a  .dp file --  install  .dp file via Kura Web ui.", 
            "title": "Deploy the bundle"
        }, 
        {
            "location": "/Bitreactive_tutorial/#test-result", 
            "text": "The data is now available at  http://agrinode.mybluemix.net/ui/  The bundle works fine but there is an error that needs to be fixed (I am working on it).  The problem is that the bundle will not send any data to the cloud and can not reconnect to the cloud broker if the internet connection lost occurs. The Block 4 will disconnect and not reconnect to the broker if there is any error.  The only way to get the bundle works again is to reboot the gateway. \nThe picture below figures out this issue:", 
            "title": "Test result."
        }
    ]
}